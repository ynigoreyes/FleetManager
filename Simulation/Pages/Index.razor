@page "/"

@using Simulation.Objects
@using Blazor.Extensions
@using Blazor.Extensions.Canvas.Canvas2D
@using Blazor.Extensions.Canvas
@namespace Simulation.Pages
@inject IJSRuntime JsRuntime;
@using Simulation.Shared

@* follow this link for how to do animations https://swharden.com/blog/2021-01-07-blazor-canvas-animated-graphics/*@
<div id="canvasHolder" style="position: fixed; width: 100%; height: 100%">
    <BECanvas @ref="CanvasRef" Height="@GlobalSettings.HEIGHT" Width="@GlobalSettings.WIDTH"></BECanvas>
</div>

@code {
    private static INotificationQueue q = new NotificationQueue();
    private static ITruckFactory tf = new TruckFactory(q);

    private AdminPanel adminPanel;
    private BECanvasComponent CanvasRef;
    private Canvas2DContext ctx;
    private Scene scene { get; set; }

    protected override void OnInitialized()
    {
        this.scene = new Scene(tf);
        base.OnInitialized();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        this.ctx = await CanvasRef.CreateCanvas2DAsync();
        this.adminPanel = new AdminPanel(this.ctx, q, this.scene.Fleet);
        await JsRuntime.InvokeAsync<object>("initRenderJS", DotNetObjectReference.Create(this));
        await base.OnInitializedAsync();
    }

    [JSInvokable]
    public void ResizeInBlazor(double width, double height) { }

    [JSInvokable]
    public async ValueTask RenderInBlazor(float timeStamp)
    {
        this.scene.MoveTrucks();

        await this.ctx.ClearRectAsync(0, 0, GlobalSettings.WIDTH, GlobalSettings.HEIGHT);
        await this.ctx.BeginBatchAsync();
        await this.renderPath();
        await this.renderLocations();
        await this.renderTrucks();
        await this.adminPanel.RenderGraphics();
        await this.ctx.EndBatchAsync();
    }

    private async Task renderTrucks()
    {
        foreach (var truck in this.scene.Fleet)
        {
            await this.createCircle(truck.positionX, truck.positionY, "black", 10);
        }
    }

    private async Task renderLocations()
    {
        await this.createCircle(GlobalSettings.OriginCoord.Item1, GlobalSettings.OriginCoord.Item2, "red");
        await this.createCircle(GlobalSettings.RepairCoord.Item1, GlobalSettings.RepairCoord.Item2, "yellow");
        await this.createCircle(GlobalSettings.Dest1Coord.Item1, GlobalSettings.Dest1Coord.Item2, "blue");
        await this.createCircle(GlobalSettings.Dest2Coord.Item1, GlobalSettings.Dest2Coord.Item2, "orange");
    }

    private async Task renderPath()
    {
        await this.ctx.SetFillStyleAsync("green");
        await this.ctx.FillRectAsync(0, GlobalSettings.HEIGHT / 2, GlobalSettings.WIDTH, 60);
        await this.ctx.SetFillStyleAsync("green");
        await this.ctx.FillRectAsync(GlobalSettings.WIDTH / 2, 0, 60, GlobalSettings.HEIGHT);
        await this.ctx.SetFillStyleAsync("green");
        await this.ctx.FillRectAsync(0, 0, GlobalSettings.WIDTH, 60);
        await this.ctx.SetFillStyleAsync("green");
        await this.ctx.FillRectAsync(0, 0, 60, GlobalSettings.HEIGHT);
        await this.ctx.SetFillStyleAsync("green");
        await this.ctx.FillRectAsync(GlobalSettings.WIDTH, 0, 60, GlobalSettings.HEIGHT);
        await this.ctx.SetFillStyleAsync("green");
        await this.ctx.FillRectAsync(0, GlobalSettings.HEIGHT, GlobalSettings.WIDTH + 60, 60);
    }

    private async Task createCircle(double positionX, double positionY, string color, double radiusSize = 20)
    {
        await this.ctx.BeginPathAsync();
        await this.ctx.ArcAsync(positionX, positionY, radiusSize, 0, 2 * Math.PI, false);
        await this.ctx.SetFillStyleAsync(color);
        await this.ctx.FillAsync();
        await this.ctx.StrokeAsync();
    }
}
