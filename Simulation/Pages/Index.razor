@page "/"

@using Simulation.Objects
@using Blazor.Extensions
@using Blazor.Extensions.Canvas.Canvas2D
@using Blazor.Extensions.Canvas
@namespace Simulation.Pages
@inject IJSRuntime JsRuntime;

@* follow this link for how to do animations https://swharden.com/blog/2021-01-07-blazor-canvas-animated-graphics/*@
<div id="canvasHolder" style="position: fixed; width: 100%; height: 100%">
    <BECanvas @ref="CanvasRef" Height="600" Width="400"></BECanvas>
</div>

    @code {

        protected BECanvasComponent CanvasRef;
        private Canvas2DContext ctx;

        private readonly Scene scene = new Scene();

        protected override async Task OnAfterRenderAsync(bool firstRender)
        {
            this.ctx = await CanvasRef.CreateCanvas2DAsync();
            await JsRuntime.InvokeAsync<object>("initRenderJS", DotNetObjectReference.Create(this));
            await base.OnInitializedAsync();
        }

        [JSInvokable]
        public void ResizeInBlazor(double width, double height) => scene.Resize(width, height);

        [JSInvokable]
        public async ValueTask RenderInBlazor(float timeStamp)
        {
            await this.ctx.BeginBatchAsync();
            await this.renderPath();
            await this.ctx.EndBatchAsync();
        }

        private async Task renderPath()
        {
            await this.ctx.SetFillStyleAsync("green");
            await this.ctx.FillRectAsync(0, scene.HEIGHT / 2, scene.WIDTH - 60, 60);
            await this.ctx.SetFillStyleAsync("green");
            await this.ctx.FillRectAsync(scene.WIDTH / 2, 0, 60, scene.HEIGHT - 60);
        }
    }
